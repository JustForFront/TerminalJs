{
  "name": "TerminalJs",
  "tagline": "A compact lib to manage complex app behaviors",
  "body": "## INTRODUCTION\r\n\r\nState management should be easy and flexible. TerminalJs is created under this believe. It simply maintains all the states value under one tree and selectively sync them to URL. Then you control them through simple commands from Javascript call or anchor DOM attribute. Since it sync states to URL, all states changes are traceable, reversible and sharable. Thus your states will be in control and you may just focus on their changes callbacks to create actual app behaviors. Give it five minutes to see how it change the way you build apps.\r\n\r\n### It’s a terminal!\r\n\r\nOnce all state changing attempts were able to run in form of commands, coding and tracing will be easier then ever. All simple value manipulation commands are pre-defined, additional commands are also welcome to fit any usage.\r\n\r\n### It manage URL!\r\n\r\nDelegated states are synced with URL. It enable the browser back, forward and bookmark features out of box. Plus the current URL could be share to anyone in any platform you like without any additional code.\r\n\r\n### It’s flexible & lightweight!\r\n\r\nThe package just got one single file in AMD or CMD package with ~30KB non-compressed file size. It preserve room for your favorite UI / MVVM frameworks to work with.\r\n\r\n## HOW IT WORKS\r\n\r\n### html\r\n```html\r\n<h1 id=\"title\"></h1>\r\n<a href=\"$title/!TerminalJs is really cool\">Make a command to terminal</a>\r\n<script src=\"/require.js\"></script>\r\n<script>\r\n    require([\"App\"])\r\n</script>\r\n```\r\n\r\n### App.ts\r\n```javascript\r\nimport {terminalJs} from \"TerminalJs\";\r\n\r\n//define state and callback\r\nterminalJs.AddState(\"title\",\"TerminalJs\",function (value,isBack) {\r\n\r\n    document.getElementById(\"title\").innerHTML = value\r\n\r\n})\r\n\r\n//listen to dom click & url pop state\r\nterminalJs.MonitorUrl().MonitorDom().Init()\r\n```\r\n\r\n\r\n### Complied App.js\r\n```javascript\r\ndefine([\"require\", \"exports\", \"TerminalJs\"], function (require, exports, TerminalJs_1) {\r\n  TerminalJs_1.terminalJs.AddState(\"title\", \"TerminalJs\", function (value, isBack) {\r\n      document.getElementById(\"title\").innerHTML = value;\r\n  });\r\n  TerminalJs_1.terminalJs.MonitorUrl().MonitorDom().Init();\r\n});\r\n```\r\n\r\n## BASIC HOWTO\r\n\r\n#### Set state\r\n```javascript\r\n/*\r\nparam1:string = state name\r\nparam2:any = default value, nullable\r\nparam3:(newValue:any,isBack:boolean,stateName:string)=>void=null = state value changed callback\r\nparam4:boolean = default:true, set if want to use pushstate to sync url onchange. Use replaceState if false\r\nparam5:number = default:0, value type of state, see type list below, 0 means auto detect from default value\r\n*/\r\nterminalJs.AddState(\"state name\",\"default value\",function (changedValue,isBack,stateName) {\r\n\r\n    //do something on state change\r\n\r\n})\r\n```\r\n\r\n#### Check state exist\r\n```javascript\r\nterminalJs.StateExist('title') //true\r\n```\r\n\r\n#### Get state value\r\n```javascript\r\ntitle = terminalJs.GetStateValue('title')\r\n```\r\n\r\n#### Set state value by setter\r\n```javascript\r\nterminalJs.States[\"title\"] = \"This is a title from JS setter, note that it's experimental but works with array/object!\"\r\nterminalJs.States[\"array\"].push('I can also trigger setter!')\r\n```\r\n\r\n#### Execute command from HTML\r\n```html\r\n<script>terminalJs.MonitorDom()</script>\r\n<a href=\"$title/A title from a anchor\">Change title state value!</a>\r\n```\r\n\r\n#### Execute command from js/ts\r\n```javascript\r\n/*\r\nparam1:string = a string command\r\nparam2:boolean = defaule:false, set to true if you want to tell the callback it is a history back action\r\nparam3:string = defaule:, method to change url, empty string means follow states settings. See static var TerminalJs.ForceModes\r\n*/\r\nterminalJs.ExeCmd('$title/I am a title from JAVASCRIPT')\r\n```\r\n\r\n#### Handle Url Changes\r\n```javascript\r\nterminalJs.MonitorUrl()\r\n\r\nterminalJs.ExeCmd('$title/title before') // title = 'title before'\r\nterminalJs.ExeCmd('$title/title after') // title = 'title after'\r\n\r\nhistory.back() // title = 'title before'\r\n\r\n```\r\n\r\n#### Debug\r\n```javascript\r\n//TerminalJs.ts\r\n//disable to improve preformance\r\nstatic Debug:boolean = true\r\n\r\nTerminalJsTrace() //print trace records\r\n```\r\n\r\n## STATE VALUE TYPES\r\n\r\nTYPE | Sync to url | VAR | DESC\r\n------------ | ------------ | ------------- | -------------\r\nAuto | T | terminalJs.StateTypes.Auto | Determine with default value\r\nString | T | terminalJs.StateTypes.String | String\r\nBoolean | T | terminalJs.StateTypes.Boolean | Boolean\r\nNumber | T | terminalJs.StateTypes.Number | Number\r\nObject | T | terminalJs.StateTypes.Object | Free structured object\r\nArray | T | terminalJs.StateTypes.Array | Array of numbers or strings\r\nTree | T | terminalJs.StateTypes.Tree | A object contain string keys and array values \r\nHidden String | F | terminalJs.StateTypes.HiddenString | String\r\nHidden Boolean | F | terminalJs.StateTypes.HiddenBoolean | Boolean\r\nHidden Number | F | terminalJs.StateTypes.HiddenNumber | Number\r\nHidden Object | F | terminalJs.StateTypes.HiddenObject | Free structured object\r\nHidden Array | F | terminalJs.StateTypes.HiddenArray | Array of numbers or strings\r\nHidden Tree | F | terminalJs.StateTypes.HiddenTree | A object contain string keys and array values \r\n\r\n## BASIC COMMAND\r\n\r\n#### Change value\r\n```javascript\r\nterminalJs.ExeCmd('$string/Change to this string') // string = 'Change to this string'\r\n\r\nterminalJs.ExeCmd('$number/123.45') // number = 123.45\r\n\r\nterminalJs.ExeCmd('$boolean/true') // boolean = true\r\nterminalJs.ExeCmd('$boolean/toggle') // boolean = false\r\n\r\nterminalJs.ExeCmd('$array/1|2|3') // set number, array = [1,2,3]\r\nterminalJs.ExeCmd('$array/a,b,c') // set strings, array = [\"a\",\"b\",\"c\"]\r\nterminalJs.ExeCmd('$array/+d') // add value, array = [\"a\",\"b\",\"c\",\"d\"]\r\nterminalJs.ExeCmd('$array/-a') // remove value, array = [\"b\",\"c\",\"d\"]\r\nterminalJs.ExeCmd('$array/!a,c') // toggle values, array = [\"a\",\"b\",\"d\"]\r\n\r\nterminalJs.ExeCmd('$tree/numbers/1|2|3') // set number, tree = {numbers:[1,2,3]}\r\nterminalJs.ExeCmd('$tree/strings/a,b,c') // set strings, tree = {numbers:[1,2,3],strings:[\"a\",\"b\",\"c\"]}\r\nterminalJs.ExeCmd('$tree/strings/+d') // add value, tree = {numbers:[1,2,3],strings:[\"a\",\"b\",\"c\",\"d\"]}\r\nterminalJs.ExeCmd('$tree/strings/-a') // remove value, tree = {numbers:[1,2,3],strings:[\"b\",\"c\",\"d\"]}\r\nterminalJs.ExeCmd('$tree/strings/!a,c') // toggle values, tree = {numbers:[1,2,3],strings:[\"a\",\"b\",\"d\"]}\r\n\r\nterminalJs.ExeCmd('$object/{\"setByJson\":{\"is\":\"ok\"}}') // object = {setByJson:{is:\"ok\"}}\r\nterminalJs.ExeCmd('$object/byStr.is/also ok') // object = {setByJson:{is:\"ok\"},byStr:{is:\"also ok\"}}\r\n\r\nterminalJs.ExeCmd('$string/combine command string/$number/234') // string = 'combine command string', number = 234\r\n\r\n//PS: commands to unset state will add to queue until the state is set\r\n```\r\n\r\n#### Reset to default value\r\n```javascript\r\nterminalJs.ExeCmd('reset/title') //reset title state, title = 'TerminalJs'\r\nterminalJs.ExeCmd('reset') //reset all state\r\n```\r\n\r\n## ADVANCED HOWTO\r\n\r\n#### Add callback to state\r\n```javascript\r\n/*\r\nparam1:string = state name\r\nparam2:(newValue:any,isBack:boolean,stateName:string)=>void=null = state value changed callback\r\n*/\r\nterminalJs.AddCallback(\"title\",function(val:any,isBack:boolean,stateName:string)=>void){\r\n\r\n  document.getElementById(\"footer_title\").innerHTML = value\r\n\r\n})\r\n```\r\n\r\n#### Remove callback from state\r\n```javascript\r\n/*\r\nparam1:string = state name\r\nparam2:(newValue:any,isBack:boolean,stateName:string)=>void=null = callback function to remove\r\n*/\r\nterminalJs.RemoveCallback(\"*\",changeListenor)\r\n```\r\n\r\n#### Custom command\r\n```javascript\r\n/*\r\nparam1:string = command syntax, see COMMAND SYNTAX section\r\nparam2:boolean = defaule:false, set to true if you want for use pushState\r\n*/\r\nterminalJs.AddCommand(\"null/$stateName:string:ALL\",defaultValToUrl(params,values){\r\n\r\n  var stateName = params[\"stateName\"].value\r\n\r\n  if(stateName==\"ALL\"){\r\n\r\n    for(i in vals){\r\n\r\n      values[i] = null\r\n\r\n    }\r\n\r\n  }else{\r\n\r\n    values[stateName] = null\r\n\r\n  }\r\n\r\n},true)\r\n```\r\n\r\n#### Force replaceState\r\n```javascript\r\n/*\r\nparam1:string|(stateValues:any)=>void = a string command / a function to set new value(s) to state(s)\r\nparam2:boolean = defaule:false, set to true if you want to tell the callback it is a history back action\r\n*/\r\nterminalJs.ForceReplaceUrl(function(stateValues:any){\r\n  \r\n  stateValues[\"title\"] = terminalJs.GetStateValue('title')+\" add something\"\r\n\r\n},false);\r\n```\r\n\r\n#### Force pushState\r\n```javascript\r\n/*\r\nparam1:string|(stateValues:any)=>void = a string command / a function to set new value(s) to state(s)\r\nparam2:boolean = defaule:false, set to true if you want to tell the callback it is a history back action\r\n*/\r\nterminalJs.ForcePushUrl(function(stateValues:any){\r\n  \r\n  stateValues[\"title\"] = terminalJs.GetStateValue('title')+\" add something and make browser history forward\"\r\n\r\n},false);\r\n```\r\n\r\n## COMMAND SYNTAX\r\n\r\n#### Syntax\r\n```\r\naction/$varName1:Type[string|number|boolean|json](optional):defaultValue(optional)/$varName2...\r\n```\r\n\r\n#### Example\r\n\r\n```\r\nlogined/$userId:number/$userName:string/$userGroup:number:0\r\n\r\nwill match\r\n\r\nlogined/1/Foo/2\r\nlogined/2/Bar\r\n```\r\n*The vars have default value must place after the vars don't\r\n\r\n## ROADMAP\r\n- [x] 2016-09 wk 5 **Unit testes**\r\n- [x] 2016-10 wk 1 **Rewrite command system**\r\n- [x] 2016-10 wk 2 **Command tracer**\r\n- [ ] 2016-10 wk 3 Document\r\n- [ ] 2016-10 wk 4 1.0 Beta\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}